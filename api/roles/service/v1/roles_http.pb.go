// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type RolesHTTPServer interface {
	CreateRoles(context.Context, *CreateRolesRequest) (*CreateRolesReply, error)
}

func RegisterRolesHTTPServer(s *http.Server, srv RolesHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/roles/create", _Roles_CreateRoles0_HTTP_Handler(srv))
}

func _Roles_CreateRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.roles.service.v1.Roles/CreateRoles")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoles(ctx, req.(*CreateRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRolesReply)
		return ctx.Result(200, reply)
	}
}

type RolesHTTPClient interface {
	CreateRoles(ctx context.Context, req *CreateRolesRequest, opts ...http.CallOption) (rsp *CreateRolesReply, err error)
}

type RolesHTTPClientImpl struct {
	cc *http.Client
}

func NewRolesHTTPClient(client *http.Client) RolesHTTPClient {
	return &RolesHTTPClientImpl{client}
}

func (c *RolesHTTPClientImpl) CreateRoles(ctx context.Context, in *CreateRolesRequest, opts ...http.CallOption) (*CreateRolesReply, error) {
	var out CreateRolesReply
	pattern := "/v1/roles/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.roles.service.v1.Roles/CreateRoles"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
