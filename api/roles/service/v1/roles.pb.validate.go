// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/roles/service/v1/roles.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRolesRequestMultiError, or nil if none found.
func (m *CreateRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRolesRequestMultiError(errors)
	}

	return nil
}

// CreateRolesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRolesRequestMultiError) AllErrors() []error { return m }

// CreateRolesRequestValidationError is the validation error returned by
// CreateRolesRequest.Validate if the designated constraints aren't met.
type CreateRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRolesRequestValidationError) ErrorName() string {
	return "CreateRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRolesRequestValidationError{}

// Validate checks the field values on CreateRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRolesReplyMultiError, or nil if none found.
func (m *CreateRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRolesReplyMultiError(errors)
	}

	return nil
}

// CreateRolesReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRolesReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRolesReplyMultiError) AllErrors() []error { return m }

// CreateRolesReplyValidationError is the validation error returned by
// CreateRolesReply.Validate if the designated constraints aren't met.
type CreateRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRolesReplyValidationError) ErrorName() string { return "CreateRolesReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRolesReplyValidationError{}

// Validate checks the field values on UpdateRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolesRequestMultiError, or nil if none found.
func (m *UpdateRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRolesRequestMultiError(errors)
	}

	return nil
}

// UpdateRolesRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolesRequestMultiError) AllErrors() []error { return m }

// UpdateRolesRequestValidationError is the validation error returned by
// UpdateRolesRequest.Validate if the designated constraints aren't met.
type UpdateRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolesRequestValidationError) ErrorName() string {
	return "UpdateRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolesRequestValidationError{}

// Validate checks the field values on UpdateRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolesReplyMultiError, or nil if none found.
func (m *UpdateRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRolesReplyMultiError(errors)
	}

	return nil
}

// UpdateRolesReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateRolesReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolesReplyMultiError) AllErrors() []error { return m }

// UpdateRolesReplyValidationError is the validation error returned by
// UpdateRolesReply.Validate if the designated constraints aren't met.
type UpdateRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolesReplyValidationError) ErrorName() string { return "UpdateRolesReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolesReplyValidationError{}

// Validate checks the field values on DeleteRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRolesRequestMultiError, or nil if none found.
func (m *DeleteRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRolesRequestMultiError(errors)
	}

	return nil
}

// DeleteRolesRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRolesRequestMultiError) AllErrors() []error { return m }

// DeleteRolesRequestValidationError is the validation error returned by
// DeleteRolesRequest.Validate if the designated constraints aren't met.
type DeleteRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRolesRequestValidationError) ErrorName() string {
	return "DeleteRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRolesRequestValidationError{}

// Validate checks the field values on DeleteRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRolesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRolesReplyMultiError, or nil if none found.
func (m *DeleteRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRolesReplyMultiError(errors)
	}

	return nil
}

// DeleteRolesReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRolesReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRolesReplyMultiError) AllErrors() []error { return m }

// DeleteRolesReplyValidationError is the validation error returned by
// DeleteRolesReply.Validate if the designated constraints aren't met.
type DeleteRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRolesReplyValidationError) ErrorName() string { return "DeleteRolesReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRolesReplyValidationError{}

// Validate checks the field values on GetRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesRequestMultiError, or nil if none found.
func (m *GetRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRolesRequestMultiError(errors)
	}

	return nil
}

// GetRolesRequestMultiError is an error wrapping multiple validation errors
// returned by GetRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesRequestMultiError) AllErrors() []error { return m }

// GetRolesRequestValidationError is the validation error returned by
// GetRolesRequest.Validate if the designated constraints aren't met.
type GetRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesRequestValidationError) ErrorName() string { return "GetRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesRequestValidationError{}

// Validate checks the field values on GetRolesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRolesReplyMultiError, or
// nil if none found.
func (m *GetRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRolesReplyMultiError(errors)
	}

	return nil
}

// GetRolesReplyMultiError is an error wrapping multiple validation errors
// returned by GetRolesReply.ValidateAll() if the designated constraints
// aren't met.
type GetRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesReplyMultiError) AllErrors() []error { return m }

// GetRolesReplyValidationError is the validation error returned by
// GetRolesReply.Validate if the designated constraints aren't met.
type GetRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesReplyValidationError) ErrorName() string { return "GetRolesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesReplyValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRolesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRolesReplyMultiError,
// or nil if none found.
func (m *ListRolesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRolesReplyMultiError(errors)
	}

	return nil
}

// ListRolesReplyMultiError is an error wrapping multiple validation errors
// returned by ListRolesReply.ValidateAll() if the designated constraints
// aren't met.
type ListRolesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesReplyMultiError) AllErrors() []error { return m }

// ListRolesReplyValidationError is the validation error returned by
// ListRolesReply.Validate if the designated constraints aren't met.
type ListRolesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesReplyValidationError) ErrorName() string { return "ListRolesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesReplyValidationError{}
