// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/roles/service/v1/roles.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSuperUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSuperUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSuperUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSuperUserRequestMultiError, or nil if none found.
func (m *CreateSuperUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSuperUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSuperUserRequestMultiError(errors)
	}

	return nil
}

// CreateSuperUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSuperUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSuperUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSuperUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSuperUserRequestMultiError) AllErrors() []error { return m }

// CreateSuperUserRequestValidationError is the validation error returned by
// CreateSuperUserRequest.Validate if the designated constraints aren't met.
type CreateSuperUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSuperUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSuperUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSuperUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSuperUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSuperUserRequestValidationError) ErrorName() string {
	return "CreateSuperUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSuperUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSuperUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSuperUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSuperUserRequestValidationError{}

// Validate checks the field values on CreateSuperUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSuperUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSuperUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSuperUserResponseMultiError, or nil if none found.
func (m *CreateSuperUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSuperUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSuperUserResponseMultiError(errors)
	}

	return nil
}

// CreateSuperUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSuperUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSuperUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSuperUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSuperUserResponseMultiError) AllErrors() []error { return m }

// CreateSuperUserResponseValidationError is the validation error returned by
// CreateSuperUserResponse.Validate if the designated constraints aren't met.
type CreateSuperUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSuperUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSuperUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSuperUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSuperUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSuperUserResponseValidationError) ErrorName() string {
	return "CreateSuperUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSuperUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSuperUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSuperUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSuperUserResponseValidationError{}

// Validate checks the field values on GetCaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCaptchaRequestMultiError, or nil if none found.
func (m *GetCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCaptchaRequestMultiError(errors)
	}

	return nil
}

// GetCaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaRequestMultiError) AllErrors() []error { return m }

// GetCaptchaRequestValidationError is the validation error returned by
// GetCaptchaRequest.Validate if the designated constraints aren't met.
type GetCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaRequestValidationError) ErrorName() string {
	return "GetCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaRequestValidationError{}

// Validate checks the field values on GetCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCaptchaResponseMultiError, or nil if none found.
func (m *GetCaptchaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Verify

	if len(errors) > 0 {
		return GetCaptchaResponseMultiError(errors)
	}

	return nil
}

// GetCaptchaResponseMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaResponseMultiError) AllErrors() []error { return m }

// GetCaptchaResponseValidationError is the validation error returned by
// GetCaptchaResponse.Validate if the designated constraints aren't met.
type GetCaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaResponseValidationError) ErrorName() string {
	return "GetCaptchaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Val

	// no validation rules for Name

	// no validation rules for Pass

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}
